#!/usr/bin/python3

import argparse
import sys
import difflib

from os import listdir
from os.path import isfile, join


def parse_args():
    parser = argparse.ArgumentParser(
        description="Compares OVAL intermediate files generated by the build system."
        " OVAL intermediate files are generated in the build/product/checks/oval directory."
        " Currently only templated content is compared.")
    parser.add_argument(
        "old", metavar="OLD_OVAL_PATH",
        help="Path to the old OVAL dir")
    parser.add_argument(
        "new", metavar="NEW_OVAL_PATH",
        help="Path to the new OVAL dir")
    parser.add_argument(
        "product", metavar="PRODUCT",
        help="Product to be compared")
    parser.add_argument(
        "--rule", metavar="RULE_ID",
        help="Compare only the rule specified by given RULE_ID"
    )
    return parser.parse_args()


def generate_diff(old_o, new_o):
    return "".join(difflib.unified_diff(
        old_o.splitlines(keepends=True), new_o.splitlines(keepends=True),
        fromfile="old OVAL", tofile="new OVAL"))


def compare_oval(
        old_oval, new_oval, rule_id):
        diff = generate_diff(old_oval, new_oval)
        if diff:
            print("OVAL for rule {rule_id} differs:\n{diff}".format(rule_id=rule_id, diff=diff))


def compare_intermediate_ovals(old_rule, new_rule, rule_id, show_diffs):
    try:
        with open(old_rule, 'r') as f:
            old_oval = f.read()
    except FileNotFoundError:
        old_oval = ""
    try:
        with open(new_rule, 'r') as f:
            new_oval = f.read()
    except FileNotFoundError:
        new_oval = ""
    compare_oval(
        old_oval, new_oval, rule_id, show_diffs)

def compare_ovals_from_path(old_dir, new_dir, product):
    old = join(old_dir, product, "checks", "oval")
    new = join(new_dir, product, "checks", "oval")
    old_files = [f for f in listdir(old) if isfile(join(old, f))]
    new_files = [f for f in listdir(new) if isfile(join(new, f))]
    all_files = set().union(old_files, new_files)

    for oval in all_files:
        compare_intermediate_ovals(join(old, oval), join(new, oval), oval.replace(".xml", ""), show_diffs=True)


def main():
    args = parse_args()
    compare_ovals_from_path(args.old, args.new, args.product)
    return 0


if __name__ == "__main__":
    sys.exit(main())
